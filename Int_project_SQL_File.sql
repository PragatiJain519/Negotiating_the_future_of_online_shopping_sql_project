CREATE DATABASE internship_project;
USE internship_project;
CREATE TABLE customer (
    customer_id VARCHAR(50),
    customer_unique_id VARCHAR(50),
    customer_zip_code_prefix INT,
    customer_city VARCHAR(50),
    customer_state VARCHAR(5)
);

CREATE TABLE order_items (
    order_id VARCHAR(50),
    order_item_id INT,
    product_id VARCHAR(50),
    seller_id VARCHAR(50),
    shipping_limit_date DATETIME,
    price DECIMAL(10 , 2 ),
    freight_value DECIMAL(10 , 2 )
);

CREATE TABLE orders (
    order_id VARCHAR(50),
    customer_id VARCHAR(50),
    order_status VARCHAR(35),
    order_purchase_timestamp DATETIME,
    order_estimated_delivery_date DATETIME
);         
 
CREATE TABLE payment (
    order_id VARCHAR(50),
    payment_sequential INT,
    payment_type VARCHAR(35),
    payment_installments INT,
    payment_value DECIMAL(10 , 2 )
);

CREATE TABLE product (
    product_id VARCHAR(50),
    product_category VARCHAR(50),
    product_name_length INT,
    product_description_length INT,
    product_photos_qty INT,
    product_weight_g INT,
    product_length_cm INT,
    product_height_cm INT,
    product_width_cm INT
);

CREATE TABLE seller (
    seller_id VARCHAR(50),
    seller_zip_code_prefix INT,
    seller_city VARCHAR(50),
    seller_state VARCHAR(5)
);                    

CREATE TABLE geolocation (
    geolocation_zip_code_prefix INT,
    geolocation_lat DECIMAL(10 , 4 ),
    geolocation_lng DECIMAL(10 , 4 ),
    geolocation_city VARCHAR(35),
    geolocation_state VARCHAR(5)
);

# Basic Problems
# ''''Q-1, List all unique cities where customer are located''''
SELECT DISTINCT
    customer_city
FROM
    customer;
SELECT 
    COUNT(DISTINCT customer_city)
FROM
    customer;
    
 #''''Q-2, count the number of order placed in 2017''''
 SELECT 
    COUNT(order_id) AS total_order
FROM
    orders
WHERE
    EXTRACT(YEAR FROM order_purchase_timestamp) = 2017;
    
 # ''''Q-3,Find the total sales per category''''
SELECT 
    product_category, SUM(price) AS Total_sales
FROM
    product
        JOIN
    order_items ON product.product_id = order_items.product_id
GROUP BY product_category
ORDER BY Total_sales desc;
    
 #''''Q-4, Calculate the % of orders That were paid in installment''''
 SELECT 
    (sum(payment_installments) / COUNT(order_id)) * 100 as Precent_of_order_paid_in_installment
FROM
    payment;
    
#''''Q-5, Count the number of customer for each state''''
SELECT 
    customer_state, COUNT(customer_id) AS total_customer
FROM
    customer
GROUP BY customer_state
ORDER BY total_customer desc; 

# INTERMEDIATE PROBLEMS
#''''Q-1 Calculate the number of orders per month in 2018''''
SELECT 
    MONTH(order_purchase_timestamp) AS Month,
    COUNT(order_id) AS Total_no_of_orders
FROM
    orders
WHERE
    YEAR(order_purchase_timestamp) = 2018
GROUP BY Month
ORDER BY Month;

#''''Q - 2, Find the Average No of product per order, Grouped customer city''''
SELECT 
    customer_city,
    AVG(product_count) AS average_product_per_order
FROM
    (SELECT 
        customer.customer_city,
            orders.order_id,
            COUNT(order_items.product_id) AS product_count
    FROM
        customer
    JOIN orders ON orders.customer_id = customer.customer_id
    JOIN order_items ON order_items.order_id = orders.order_id
    GROUP BY customer.customer_city , orders.order_id) subquery
GROUP BY customer_city
order by average_product_per_order DESC;

#''''Q-3, Calculate the % of total revenue contributed by each product category''''
SELECT 
    p.product_category,
    SUM(o.price) AS total_revenue,
    (SUM(o.price) * 100.0 / (SELECT 
            SUM(price)
        FROM
            order_items)) AS percentage_of_total_revenue
FROM
    product p
        JOIN
    order_items o ON p.product_id = o.product_id
GROUP BY p.product_category
ORDER BY percentage_of_total_revenue DESC;

#''''Q-4, identify the correlation between product price and the number of times a product has been purchased''''
with purchase_c as (SELECT 
    product_id, price, COUNT(order_id) AS purchase_count
FROM
    order_items
GROUP BY product_id, price),
stats AS (
    -- Calculate the necessary aggregates for correlation formula
    SELECT 
        COUNT(*) AS n, 
        SUM(price) AS sum_price, 
        SUM(purchase_count) AS sum_count, 
        SUM(price * purchase_count) AS sum_price_count, 
        SUM(price * price) AS sum_price_squared, 
        SUM(purchase_count * purchase_count) AS sum_count_squared
    FROM 
        purchase_c
)
-- Apply the correlation formula
SELECT 
    (n * sum_price_count - sum_price * sum_count) /
    SQRT((n * sum_price_squared - sum_price * sum_price) * (n * sum_count_squared - sum_count * sum_count)) AS correlation
FROM 
    stats;

#''''Q-5, Calculate the total revenue generated by each saller, and rank them by revenue
SELect * from seller;
SELECT 
    s.seller_id, 
    SUM(o.price) AS total_revenue, 
    RANK() OVER (ORDER BY SUM(o.price) DESC) AS R
FROM 
    seller s 
JOIN 
    order_items o 
ON 
    s.seller_id = o.seller_id 
GROUP BY 
    s.seller_id;
    
 # ADVANCED PROBLEMS
#'''Q-1, calculate the moving average of order values for each customer over their order history'''
WITH order_totals AS (
    SELECT 
        c.customer_id,
        o.order_purchase_timestamp as order_date,
        SUM(oi.price) AS total_order_value
    FROM 
        orders o
    JOIN 
        order_items oi 
    ON 
        o.order_id = oi.order_id
    JOIN
		customer c
     ON 
        c.customer_id = o.customer_id
    GROUP BY 
        c.customer_id, o.order_purchase_timestamp
)
SELECT 
    customer_id,
    order_date,
    total_order_value,
    AVG(total_order_value) OVER (
        PARTITION BY customer_id 
        ORDER BY order_date ASC 
        ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
    ) AS moving_avg_order_value
FROM 
    order_totals
ORDER BY 
    customer_id, order_date;
    
#'''Q-2 calculate the cumulative sales per month for each year'''
SELECT 
    YEAR(o.order_purchase_timestamp) AS year,
    MONTH(o.order_purchase_timestamp) AS month,
    SUM(oi.price) AS monthly_sales,
    SUM(SUM(oi.price)) OVER (
        PARTITION BY YEAR(o.order_purchase_timestamp) 
        ORDER BY MONTH(o.order_purchase_timestamp)
    ) AS cumulative_sales
FROM 
    orders o
JOIN
    order_items oi
ON
   o.order_id = oi.order_id 
GROUP BY 
    YEAR(o.order_purchase_timestamp), MONTH(o.order_purchase_timestamp)
ORDER BY 
    year, month;
    
 #'''Q-3 calculate of yoy growth rate of total sales'''
 WITH yearly_sales AS (
    SELECT 
        YEAR(o.order_purchase_timestamp) AS year,
        SUM(oi.price) AS total_sales
    FROM 
        orders o
    JOIN
        order_items oi
    ON
        o.order_id = oi.order_id
    GROUP BY 
        YEAR(order_purchase_timestamp)
)
SELECT 
    year,
    total_sales,
    LAG(total_sales) OVER (ORDER BY year) AS previous_year_sales,
    CASE 
        WHEN LAG(total_sales) OVER (ORDER BY year) IS NOT NULL THEN 
            (total_sales - LAG(total_sales) OVER (ORDER BY year)) * 100.0 / LAG(total_sales) OVER (ORDER BY year)
        ELSE 
            NULL
    END AS yoy_growth_rate
FROM 
    yearly_sales
ORDER BY 
    year;
    
    
#'''Q-4 Calculate the retention rate of customers, define as the % of customer who make another purchase within 6 months of their first purchase'''

WITH first_purchases AS (
    -- Find the first purchase date for each customer
    SELECT 
        customer_id, 
        MIN(order_purchase_timestamp) AS first_purchase_date
    FROM 
        orders
    GROUP BY 
        customer_id
),
repeat_purchases AS (
    -- Find customers who made a repeat purchase within 6 months of their first purchase
    SELECT 
        fp.customer_id
    FROM 
        first_purchases fp
    JOIN 
        orders o
    ON 
        fp.customer_id = o.customer_id
        AND o.order_purchase_timestamp > fp.first_purchase_date
        AND o.order_purchase_timestamp <= DATE_ADD(fp.first_purchase_date, INTERVAL 6 MONTH)
),
total_customers AS (
    -- Count the total number of unique customers
    SELECT 
        COUNT(DISTINCT customer_id) AS total_customers
    FROM 
        orders
),
retained_customers AS (
    -- Count the number of customers who made a repeat purchase within 6 months
    SELECT 
        COUNT(DISTINCT customer_id) AS retained_customers
    FROM 
        repeat_purchases
)
-- Calculate the retention rate
SELECT 
    (rc.retained_customers * 100.0 / tc.total_customers) AS retention_rate
FROM 
    retained_customers rc, total_customers tc;
    
#'''Q-5, identify top 3 customers who spent the most money each year'''  
WITH yearly_customer_spend AS (
    -- Calculate total spend per customer per year
    SELECT 
        customer_id,
        YEAR(order_purchase_timestamp) AS year,
        SUM(payment_value) AS total_spent
    FROM 
        orders
   JOIN
        payment
   ON
       orders.order_id = payment.order_id
   GROUP BY 
        customer_id, YEAR(order_purchase_timestamp)
),
ranked_customers AS (
    -- Rank customers by total spend within each year
    SELECT 
        customer_id,
        year,
        total_spent,
        RANK() OVER (PARTITION BY year ORDER BY total_spent DESC) AS r
    FROM 
        yearly_customer_spend
)
-- Select the top 3 customers for each year
SELECT 
    customer_id,
    year,
    total_spent
FROM 
    ranked_customers
WHERE 
    r <= 3
ORDER BY 
    year, r;   

       




